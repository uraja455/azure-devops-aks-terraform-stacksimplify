# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

variables:
  tag: '$(Build.BuildId)'
  imageName: 'umakanth455/user-management'


pool:
  vmImage: ubuntu-latest

stages:
  - stage: Build
    displayName: BuildAndPush
    jobs:
      - job: BuildJob
        displayName: Build
        steps:
          - task: WhiteSource@21
            inputs:
              cwd: '$(System.DefaultWorkingDirectory)'
              projectName: 'user-mgmt'
          
          #- task: SonarQubePrepare@5
           # inputs:
            #  SonarQube: 'sonarsvc'
             # scannerMode: 'Other'
              #extraProperties: 'sonar.projectKey=Aks-terraform-devops-stacksimplify_Aks-terraform-devops-stacksimplify_AYdmyFUiwV4bTNVPSQ2V'
          
          #- task: Maven@4
           # inputs:
            #  mavenPomFile: 'pom.xml'
             # publishJUnitResults: false
              #javaHomeOption: 'JDKVersion'
              #mavenVersionOption: 'Default'
              #mavenAuthenticateFeed: false
              #effectivePomSkip: false
              #sonarQubeRunAnalysis: true
              #sqMavenPluginVersionChoice: 'latest'
          #- task: SonarQubeAnalyze@5
          #- task: SonarQubePublish@5
           # inputs:
            #  pollingTimeoutSec: '300' 

          
          - task: Docker@2
            inputs:
              containerRegistry: 'DockerSVC'
              repository: 'umakanth455/user-management'
              command: 'buildAndPush'
              Dockerfile: '**/Dockerfile'
              tags: '$(tag)'
          
          - script: |
              sudo apt-get install rpm
              wget https://github.com/aquasecurity/trivy/releases/download/v$(trivyVersion)/trivy_$(trivyVersion)_Linux-64bit.deb
              sudo dpkg -i trivy_$(trivyVersion)_Linux-64bit.deb
              trivy -v
            displayName: 'Download and install Trivy'
          
          - task: CmdLine@2
            displayName: "Run trivy scan" 
            inputs:
              script: |
                  trivy image --exit-code 0 --severity LOW,MEDIUM $(imageName):$(tag)
                  trivy image --exit-code 1 --severity HIGH,CRITICAL $(imageName):$(tag)
           

          - bash: echo Contents in System Default Working Directory; ls -R $(System.DefaultWorkingDirectory)        
          - bash: echo Before copying Contents in Build Artifact Directory; ls -R $(Build.ArtifactStagingDirectory)        
    # Task-2: Copy files (Copy files from a source folder to target folder)
    # Source Directory: $(System.DefaultWorkingDirectory)/kube-manifests
    # Target Directory: $(Build.ArtifactStagingDirectory)
          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)/kube-manifests'
              Contents: '**'
              TargetFolder: '$(Build.ArtifactStagingDirectory)'
              OverWrite: true
    # List files from Build Artifact Staging Directory - After Copy
          - bash: echo After copying to Build Artifact Directory; ls -R $(Build.ArtifactStagingDirectory)  
    # Task-3: Publish build artifacts (Publish build to Azure Pipelines)           
          - task: replacetokens@5
            inputs:
              rootDirectory: '$(Build.ArtifactStagingDirectory)/'
              targetFiles: '06-UserMgmtWebApp-Deployment.yml'
              encoding: 'auto'
              tokenPattern: 'default'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              actionOnNoFiles: 'continue'
              enableTransforms: false
              enableRecursion: false
              useLegacyPattern: false
              enableTelemetry: true
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'manifests'
              publishLocation: 'Container'


